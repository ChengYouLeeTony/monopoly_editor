from django.contrib.auth.models import Userfrom monopoly.models import Profilefrom monopoly.core.game import *from monopoly.ws_handlers.modal_title_enum import *# from channels import Groupimport jsondef get_building_type(tile_id, game):    land = game.get_land(tile_id)    if land.get_content().get_type() == LandType.CONSTRUCTION_LAND:        building = land.get_content().get_property()        if building == BuildingType.HOTEL:            res = land.get_content().get_property_num()        elif building == BuildingType.HOUSE:            res = land.get_content().get_property_num()        else:            res = 0    else:        res = 0    return resdef build_init_msg(players, cash_change, pos_change, init_direction, wait_decision, decision, next_player,                   title, landname, owners, houses, player_names, player_varible_1s, player_varible_2s, player_varible_3s, player_varible_4s, player_varible_5s,                   wait_user_define_decision, confirm_button_text, cancel_button_text,                    next_player_info, wait_multiple_choice_decision, multiple_choice_info, NUM_OF_HOUSE_EQUAL_HOTEL):    players_list = []    for player in players:        profile_user = User.objects.get(username=player)        try:            profile = Profile.objects.get(user=profile_user)        except Exception:            profile = None        avatar = profile.avatar.url if profile else ""        players_list.append({"fullName": profile_user.username,                     "userName": profile_user.username, "avatar": avatar})    ret = {"action": "init",           "players": players_list,           "changeCash": cash_change,           "posChange": pos_change,           "initDirection": init_direction,           "waitDecision": wait_decision,           "decision": decision,           "nextPlayer": next_player,           "title": title,           "landname": landname,           "owners": owners,           "houses": houses,           "player_names": player_names,           "player_varible_1s": player_varible_1s,           "player_varible_2s": player_varible_2s,           "player_varible_3s": player_varible_3s,           "player_varible_4s": player_varible_4s,           "player_varible_5s": player_varible_5s,           "waitUserDefineDecision": wait_user_define_decision,           "confirm_button_text": confirm_button_text,           "cancel_button_text": cancel_button_text,           "next_player_info": next_player_info,           "wait_multiple_choice_decision": wait_multiple_choice_decision,           "multiple_choice_info": multiple_choice_info,           "NUM_OF_HOUSE_EQUAL_HOTEL": NUM_OF_HOUSE_EQUAL_HOTEL,           }    print(json.dumps(ret))    return json.dumps(ret)def build_add_err_msg():    ret = {"action": "add_err",           }    print(json.dumps(ret))    return json.dumps(ret)def build_roll_res_msg(curr_player, steps, result, is_option, is_cash_change, is_new_event,                       new_pos, curr_cash, next_player, title, landname, bypass_start, is_game_end,                       curr_variable_1, curr_variable_2, curr_variable_3, curr_variable_4, curr_variable_5,                       is_variable_1_change, is_variable_2_change, is_variable_3_change, is_variable_4_change, is_variable_5_change,                       is_user_define_event, is_user_define_option, confirm_button_text, cancel_button_text,                       trigger_event_type, trigger_event_title, trigger_event_subtitle, trigger_event_message, trigger_event_value,                       START_REWARD, is_user_define_cash_change, event_info, rolled_money_and_variables,                       next_player_info, is_simple_event, is_chance_card_event, is_chance_card_cash_change,                       is_multiple_choice, multiple_choice_info, sound_info, is_not_show_event,                       chance_card_background_img_url):    ret = {"action": "roll_res",           "curr_player": curr_player,           "steps": steps,           "result": result,           "is_option": is_option,           "is_cash_change": is_cash_change,           "is_new_event": is_new_event,           "new_pos": new_pos,           "curr_cash": curr_cash,           "next_player": next_player,           "title": title,           "landname": landname,           "bypass_start": bypass_start,           "is_game_end": is_game_end,           "curr_variable_1": curr_variable_1,           "curr_variable_2": curr_variable_2,           "curr_variable_3": curr_variable_3,           "curr_variable_4": curr_variable_4,           "curr_variable_5": curr_variable_5,           "is_variable_1_change": is_variable_1_change,           "is_variable_2_change": is_variable_2_change,           "is_variable_3_change": is_variable_3_change,           "is_variable_4_change": is_variable_4_change,           "is_variable_5_change": is_variable_5_change,           "is_user_define_event": is_user_define_event,           "is_user_define_option": is_user_define_option,           "confirm_button_text": confirm_button_text,           "cancel_button_text": cancel_button_text,           "trigger_event_type": trigger_event_type,           "trigger_event_title": trigger_event_title,           "trigger_event_subtitle": trigger_event_subtitle,           "trigger_event_message": trigger_event_message,           "trigger_event_value": trigger_event_value,           "START_REWARD": START_REWARD,           "is_user_define_cash_change": is_user_define_cash_change,           "event_info": event_info,           "rolled_money_and_variables": rolled_money_and_variables,           "next_player_info" : next_player_info,           "is_simple_event": is_simple_event,           "is_chance_card_event": is_chance_card_event,           "is_chance_card_cash_change": is_chance_card_cash_change,           "is_multiple_choice": is_multiple_choice,            "multiple_choice_info": multiple_choice_info,           "sound_info": sound_info,           "is_not_show_event": is_not_show_event,           "chance_card_background_img_url": chance_card_background_img_url,            }    print(json.dumps(ret))    return json.dumps(ret)def build_game_end_msg(curr_player, all_scores, score_board_info):    ret = {"action": "game_end",           "loser": curr_player,           "all_scores": all_scores,           "score_board_info": score_board_info    }    print(json.dumps(ret))    return json.dumps(ret)def build_buy_land_msg(curr_player, curr_cash, tile_id, next_player, next_player_info,                        new_pos, trigger_event_type, trigger_event_title, trigger_event_subtitle, trigger_event_message, trigger_event_value,                        START_REWARD, event_info, rolled_money_and_variables, sound_info,                        curr_variable_1, curr_variable_2, curr_variable_3, curr_variable_4, curr_variable_5,                        is_variable_1_change, is_variable_2_change, is_variable_3_change, is_variable_4_change, is_variable_5_change):    ret = {"action": "buy_land",           "curr_player": curr_player,           "curr_cash": curr_cash,           "tile_id": tile_id,           "next_player": next_player,           "next_player_info": next_player_info,           "new_pos": new_pos,           "trigger_event_type": trigger_event_type,           "trigger_event_title": trigger_event_title,           "trigger_event_subtitle": trigger_event_subtitle,           "trigger_event_message": trigger_event_message,           "trigger_event_value": trigger_event_value,           "START_REWARD": START_REWARD,           "event_info": event_info,           "rolled_money_and_variables": rolled_money_and_variables,           "sound_info": sound_info,           "curr_variable_1": curr_variable_1,           "curr_variable_2": curr_variable_2,           "curr_variable_3": curr_variable_3,           "curr_variable_4": curr_variable_4,           "curr_variable_5": curr_variable_5,           "is_variable_1_change": is_variable_1_change,           "is_variable_2_change": is_variable_2_change,           "is_variable_3_change": is_variable_3_change,           "is_variable_4_change": is_variable_4_change,           "is_variable_5_change": is_variable_5_change,    }    print(json.dumps(ret))    return json.dumps(ret)def build_construct_msg(curr_player, curr_cash, tile_id, build_type, next_player, next_player_info,                        new_pos, trigger_event_type, trigger_event_title, trigger_event_subtitle, trigger_event_message, trigger_event_value,                        START_REWARD, event_info, rolled_money_and_variables, sound_info,                        curr_variable_1, curr_variable_2, curr_variable_3, curr_variable_4, curr_variable_5,                        is_variable_1_change, is_variable_2_change, is_variable_3_change, is_variable_4_change, is_variable_5_change):    ret = {"action": "construct",           "curr_player": curr_player,           "curr_cash": curr_cash,           "tile_id": tile_id,           "build_type": build_type,           "next_player": next_player,           "next_player_info": next_player_info,           "new_pos": new_pos,           "trigger_event_type": trigger_event_type,           "trigger_event_title": trigger_event_title,           "trigger_event_subtitle": trigger_event_subtitle,           "trigger_event_message": trigger_event_message,           "trigger_event_value": trigger_event_value,           "START_REWARD": START_REWARD,           "event_info": event_info,           "rolled_money_and_variables": rolled_money_and_variables,           "sound_info": sound_info,           "curr_variable_1": curr_variable_1,           "curr_variable_2": curr_variable_2,           "curr_variable_3": curr_variable_3,           "curr_variable_4": curr_variable_4,           "curr_variable_5": curr_variable_5,           "is_variable_1_change": is_variable_1_change,           "is_variable_2_change": is_variable_2_change,           "is_variable_3_change": is_variable_3_change,           "is_variable_4_change": is_variable_4_change,           "is_variable_5_change": is_variable_5_change,           }    print(json.dumps(ret))    return json.dumps(ret)def build_confirm_user_define_decision_msg(next_player, curr_cash, curr_player, next_player_info,                                       new_pos, trigger_event_type, trigger_event_title, trigger_event_subtitle, trigger_event_message, trigger_event_value,                                       START_REWARD, event_info, rolled_money_and_variables, sound_info,                                       curr_variable_1, curr_variable_2, curr_variable_3, curr_variable_4, curr_variable_5,                                       is_variable_1_change, is_variable_2_change, is_variable_3_change, is_variable_4_change, is_variable_5_change,                                       is_game_end):    ret = {"action": "confirm_user_define_decision",           "next_player": next_player,           "curr_cash": curr_cash,           "curr_player": curr_player,           "next_player_info": next_player_info,           "new_pos": new_pos,           "trigger_event_type": trigger_event_type,           "trigger_event_title": trigger_event_title,           "trigger_event_subtitle": trigger_event_subtitle,           "trigger_event_message": trigger_event_message,           "trigger_event_value": trigger_event_value,           "START_REWARD": START_REWARD,           "event_info": event_info,           "rolled_money_and_variables": rolled_money_and_variables,           "sound_info": sound_info,           "curr_variable_1": curr_variable_1,           "curr_variable_2": curr_variable_2,           "curr_variable_3": curr_variable_3,           "curr_variable_4": curr_variable_4,           "curr_variable_5": curr_variable_5,           "is_variable_1_change": is_variable_1_change,           "is_variable_2_change": is_variable_2_change,           "is_variable_3_change": is_variable_3_change,           "is_variable_4_change": is_variable_4_change,           "is_variable_5_change": is_variable_5_change,           "is_game_end": is_game_end    }    print(json.dumps(ret))    return json.dumps(ret)def build_cancel_decision_msg(curr_player, next_player, next_player_info,                              new_pos, trigger_event_type, trigger_event_title, trigger_event_subtitle, trigger_event_message, trigger_event_value,                              START_REWARD, event_info, rolled_money_and_variables, sound_info):    ret = {"action": "cancel_decision",           "curr_player": curr_player,           "next_player": next_player,           "next_player_info": next_player_info,           "new_pos": new_pos,           "trigger_event_type": trigger_event_type,           "trigger_event_title": trigger_event_title,           "trigger_event_subtitle": trigger_event_subtitle,           "trigger_event_message": trigger_event_message,           "trigger_event_value": trigger_event_value,           "START_REWARD": START_REWARD,           "event_info": event_info,           "rolled_money_and_variables": rolled_money_and_variables,           "sound_info": sound_info    }    print(json.dumps(ret))    return json.dumps(ret)def build_cancel_decision_user_define_msg(next_player, curr_cash, curr_player, next_player_info,                                       new_pos, trigger_event_type, trigger_event_title, trigger_event_subtitle, trigger_event_message, trigger_event_value,                                       START_REWARD, event_info, rolled_money_and_variables, sound_info):    ret = {"action": "cancel_decision_user_define",           "next_player": next_player,           "curr_cash": curr_cash,           "curr_player": curr_player,           "next_player_info": next_player_info,           "new_pos": new_pos,           "trigger_event_type": trigger_event_type,           "trigger_event_title": trigger_event_title,           "trigger_event_subtitle": trigger_event_subtitle,           "trigger_event_message": trigger_event_message,           "trigger_event_value": trigger_event_value,           "START_REWARD": START_REWARD,           "event_info": event_info,           "rolled_money_and_variables": rolled_money_and_variables,           "sound_info": sound_info,    }    print(json.dumps(ret))    return json.dumps(ret)def build_wrong_answer_msg(next_player, curr_cash, curr_player, next_player_info,                            new_pos, trigger_event_type, trigger_event_title, trigger_event_subtitle, trigger_event_message, trigger_event_value,                            START_REWARD, event_info, rolled_money_and_variables, sound_info,                            is_game_end):    ret = {"action": "wrong_answer",           "next_player": next_player,           "curr_cash": curr_cash,           "curr_player": curr_player,           "next_player_info": next_player_info,           "new_pos": new_pos,           "trigger_event_type": trigger_event_type,           "trigger_event_title": trigger_event_title,           "trigger_event_subtitle": trigger_event_subtitle,           "trigger_event_message": trigger_event_message,           "trigger_event_value": trigger_event_value,           "START_REWARD": START_REWARD,           "event_info": event_info,           "rolled_money_and_variables": rolled_money_and_variables,           "sound_info": sound_info,           "is_game_end": is_game_end    }    print(json.dumps(ret))    return json.dumps(ret)def build_pass_start_msg(curr_player):    ret = {"action": "pass_start",           "curr_player": curr_player,          }    print(json.dumps(ret))    return json.dumps(ret)def build_chat_msg(sender, content):    ret = {"action": "chat",           "sender": sender,           "content": content,    }    print(json.dumps(ret))    return json.dumps(ret)def build_change_dice_num(dice_num):    ret = {"action": "change_dice_num",           "dice_num": dice_num    }    print(json.dumps(ret))    return json.dumps(ret)def build_notify_cheat():    ret = {"action": "notify_cheat",    }    print(json.dumps(ret))    return json.dumps(ret)